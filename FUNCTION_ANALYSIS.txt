# Complete Function Analysis for Triple-I Backend Application

This FastAPI application generates ESRS S1 Management Reports from workforce data. Here's a detailed breakdown of every function in each route:

## Main Application (`app/main.py`)

### `root()` - **GET** `/`
**Purpose**: Simple health check endpoint
- **Parameters**: None
- **Returns**: `{"message": "Hello woeld"}` (note: contains a typo)
- **Functionality**: Basic endpoint to verify the API is running

---

## Upload Router (`app/routers/upload.py`)

### `parse_datekey(datekey)` - Helper Function
**Purpose**: Converts various date formats to Python datetime objects
- **Parameters**: 
  - `datekey`: Mixed type (string, datetime, pandas Timestamp, or NaN)
- **Returns**: `datetime` object
- **Functionality**:
  - Handles NaN values by returning current datetime
  - Supports existing datetime/pandas Timestamp objects
  - Parses string formats: `YYYYMMDD`, `YYYY-MM-DD`, or pandas auto-parsing
  - Raises `ValueError` if parsing fails

### `upload(file: UploadFile)` - **POST** `/upload/`
**Purpose**: Processes Excel files containing ESRS S1 workforce data and stores it in the database
- **Parameters**: 
  - `file`: Excel file (.xlsx) via multipart form upload
- **Returns**: JSON response with processing results and KPI data
- **Functionality**:

#### 1. **File Validation**
- Checks if file has `.xlsx` extension
- Returns error if not Excel format

#### 2. **Excel Processing**
- Reads all sheets from Excel file using pandas
- Normalizes column names (strip spaces, remove underscores, lowercase)
- Maps sheets to database models based on required columns

#### 3. **Database Model Mapping**
Defines 6 ESRS S1 data models with their required columns:
- **`injuries`** → `FS1_WorkplaceInjuries`: injury tracking data
- **`workforce`** → `FS1_Workforce`: basic workforce counts
- **`diversity`** → `FS1_Diversity`: disability inclusion metrics
- **`workforcediversity`** → `FS1_WorkforceDiversity`: workforce diversity data
- **`workforcecomposition`** → `FS1_WorkforceComposition`: gender/contract type breakdowns
- **`employeetraining`** → `FS1_EmployeeTraining`: training hours data
- **`employeeturnover`** → `FS1_EmployeeTurnover`: turnover metrics by demographics

#### 4. **Data Processing Pipeline**
- **`map_record_to_model(record, model_cls)`**: Maps Excel rows to SQLAlchemy model instances
  - Handles datetime conversion using `parse_datekey()`
  - Auto-populates `createdat`/`updatedat` timestamps
  - Maps column names to model attributes

#### 5. **Database Operations**
- Clears all existing data from ESRS tables
- Processes each valid sheet:
  - Validates required columns exist
  - Creates model instances for each row
  - Commits to database
- Tracks processed vs skipped sheets

#### 6. **KPI Generation**
- Extracts `company_id` from first valid sheet
- Determines reporting year from datekey columns
- Calls `kpi_processor.get_all_kpi_data()` to generate KPIs
- Returns comprehensive response with processing summary and KPI results

---

## Report Router (`app/routers/report.py`)

### `ReportRequest` - Pydantic Model
**Purpose**: Validates incoming report generation requests
- **Fields**:
  - `company_id`: int (required)
  - `year`: int (required) 
  - `company_name`: Optional[str]
  - `kpi_data`: Dict[str, Any] (required)
  - `historical_kpi_data`: Optional[Dict[str, Any]]
  - `type`: str (default: "pdf")

### `create_report(payload: ReportRequest)` - **POST** `/report/`
**Purpose**: Generates comprehensive ESRS S1 management reports with AI-generated narratives and visualizations
- **Parameters**: `ReportRequest` object containing report configuration
- **Returns**: JSON with report sections, charts, and base64-encoded file
- **Functionality**:

#### 1. **Configuration Setup**
- Sets OpenAI model to "gpt-4o-mini"
- Gets default layout template via `get_layout("default")`
- Extracts all parameters from payload

#### 2. **Report Generation Pipeline**
- **`generate_management_report()`**: Main orchestrator function
  - Generates AI-powered narrative sections
  - Creates data visualizations (charts)
  - Returns structured report content

#### 3. **File Generation**
Based on `type` parameter:

**For DOCX Reports** (`type == "docx"`):
- **`generate_docx_report()`**: Creates Microsoft Word document
  - Uses python-docx library
  - Includes cover page, KPI summary, charts, and narrative sections
  - Returns filename and base64-encoded content

**For PDF Reports** (default):
- **`generate_pdf_report()`**: Creates PDF document  
  - Uses ReportLab library
  - Similar structure to DOCX but PDF-optimized
  - Returns filename and base64-encoded content

#### 4. **Response Structure**
Returns comprehensive JSON with:
- **`sections`**: AI-generated narrative content for each report section
- **`charts`**: Base64-encoded chart images
- **`file`**: Generated document (name + base64 content)

---

## Supporting Module Functions

### KPI Processor (`app/kpi_processor.py`)

The `KPIProcessor` class contains 7 main KPI calculation methods:

#### 1. **`get_total_workforce_by_gender()`**
- Calculates workforce distribution by gender
- Supports filtering by years, organizational units, countries
- Returns gender breakdown with employee counts

#### 2. **`get_percentage_employees_with_disabilities()`**
- Computes disability inclusion percentage
- Analyzes workforce diversity metrics
- Returns disability statistics

#### 3. **`get_employee_turnover_rate()`**
- Calculates overall turnover rate
- Supports demographic breakdowns (gender, age, contract type)
- Returns turnover percentages and trends

#### 4. **`get_average_training_hours_per_employee()`**
- Computes training hours per employee
- Provides gender-based breakdowns
- Returns training effectiveness metrics

#### 5. **`get_workplace_injury_rate()`**
- Calculates workplace injury rates
- Supports organizational unit filtering
- Returns safety performance metrics

#### 6. **`get_workforce_by_gender_by_org_unit()`**
- Provides workforce composition by organizational unit
- Shows gender distribution across departments
- Returns detailed organizational breakdowns

#### 7. **`get_employee_turnover_rate_by_org_unit()`**
- Calculates turnover rates by organizational unit
- Identifies high-turnover departments
- Returns unit-specific retention metrics

#### 8. **`get_all_kpi_data()`**
- **Master function** that calls all 7 KPI methods
- Returns comprehensive KPI dataset
- Used by upload route to generate initial KPIs

### Report Generator (`app/report_generator.py`)

#### **`generate_management_report()`** - Main Orchestrator
**Purpose**: Coordinates AI narrative generation and chart creation
- **Parameters**: KPI data, historical data, OpenAI model
- **Returns**: Dictionary with sections and charts

**Functionality**:
1. **Chart Generation**: Creates 3 types of visualizations:
   - **`_plot_workforce_by_gender_pie()`**: Gender distribution pie chart
   - **`_plot_training_hours_by_gender_bar()`**: Training hours by gender bar chart  
   - **`_plot_trend_bar()`**: Year-over-year trend comparison

2. **AI Narrative Generation**: 
   - **`_generate_section_async()`**: Generates AI content for each report section
   - Uses OpenAI API with specialized prompts
   - Creates 8 narrative sections:
     - Executive Summary
     - Workforce Composition and Diversity
     - Working Conditions and Equal Opportunity
     - Training and Development
     - Turnover and Retention
     - Health and Safety
     - Outlook and Next Steps
     - Closing

3. **Async Processing**: Uses `asyncio.gather()` for parallel section generation

#### **`_fig_to_base64_png()`** - Utility Function
- Converts matplotlib figures to base64 PNG strings
- Used for embedding charts in reports

### File Export (`app/file_export.py`)

#### **`generate_docx_report()`** - DOCX Generation
**Purpose**: Creates Microsoft Word reports
- **Parameters**: All report content (KPIs, charts, narratives, layout)
- **Returns**: Tuple of (filename, base64_content)

**Functionality**:
1. **Cover Page**: Title, company info, reporting year, logo placeholder
2. **KPI Summary Table**: **`_build_kpi_summary_rows()`** creates metric/value table
3. **Charts Section**: Embeds base64 images using **`_decode_base64_image()`**
4. **Narrative Sections**: Formats AI-generated content with proper headings
5. **Closing**: Adds formal closing section

#### **`generate_pdf_report()`** - PDF Generation  
**Purpose**: Creates PDF reports using ReportLab
- **Parameters**: Same as DOCX version
- **Returns**: Tuple of (filename, base64_content)

**Functionality**:
1. **Cover Page**: Similar to DOCX but PDF-optimized
2. **KPI Summary**: Table with styling
3. **Charts**: Embedded images with proper sizing
4. **Narrative**: Formatted paragraphs with spacing
5. **Page Breaks**: Proper document flow

#### **`_decode_base64_image()`** - Utility Function
- Converts base64 image strings to BytesIO objects
- Used for embedding charts in both DOCX and PDF

#### **`_build_kpi_summary_rows()`** - Utility Function
- Extracts key metrics from KPI data
- Formats as table rows for report inclusion
- Handles missing data gracefully

### Templates (`app/templates/`)

#### **`get_layout()`** - Layout Management
**Purpose**: Returns report layout configuration
- **Parameters**: `template_name` (default: "default")
- **Returns**: Layout dictionary with sections, styling, and structure

**Layout Components**:
- **Cover Page**: Title, date, logo, confidentiality settings
- **KPI Summary**: Table structure and styling
- **Visuals**: Chart ordering and display preferences  
- **Narrative**: Section titles and organization
- **Closing**: Footer and closing structure

#### **`build_section_prompt()`** - AI Prompt Builder
**Purpose**: Creates specialized prompts for each report section
- **Parameters**: Section name, KPI data, historical data
- **Returns**: Formatted prompt string for OpenAI API

**Section Guidance**: Defines specific instructions for each narrative section:
- Executive Summary (3 sentences max)
- Workforce Composition (3 sentences max)
- Working Conditions (3 sentences max)
- Training and Development (3 sentences max)
- Turnover and Retention (3 sentences max)
- Health and Safety (3 sentences max)
- Outlook and Next Steps (5 sentences max)
- Closing (5 sentences max)

---

## Data Flow Summary

1. **Upload Route**: Excel → Database → KPI Calculation
2. **Report Route**: KPI Data → AI Analysis → Chart Generation → Document Creation
3. **Supporting Modules**: Handle data processing, visualization, and file generation

The application provides a complete ESRS S1 reporting pipeline from raw workforce data to professional management reports with AI-generated insights and visualizations.

---

## API Endpoints Summary

### Main Routes
- **GET** `/` - Health check endpoint
- **POST** `/upload/` - Excel file upload and processing
- **POST** `/report/` - Report generation

### Key Features
- Excel file processing with automatic model mapping
- Comprehensive KPI calculations (7 different metrics)
- AI-powered narrative generation using OpenAI
- Professional report generation (DOCX/PDF)
- Data visualization with matplotlib charts
- Database integration with SQLAlchemy
- Async processing for performance

### Dependencies
- FastAPI for web framework
- SQLAlchemy for database ORM
- pandas for data processing
- OpenAI for AI content generation
- matplotlib for chart generation
- python-docx for Word document creation
- ReportLab for PDF generation
- Pydantic for data validation
